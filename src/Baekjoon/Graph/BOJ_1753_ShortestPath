
import java.io.BufferedReader;

import java.io.IOException;

import java.io.InputStreamReader;

import java.util.ArrayList;

import java.util.List;

import java.util.PriorityQueue;

import java.util.StringTokenizer;

public class Main{

    final static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    final static int inf = Integer.MAX_VALUE;

    static int start;

    static int[] shortestPath;

    static List<Node> nodes = new ArrayList<>();

    public static void main(String[] args) throws IOException{

        input();

        dijkstra();

    }

    private static void input() throws IOException {

        StringTokenizer st = new StringTokenizer(br.readLine());

        int V = Integer.parseInt(st.nextToken());

        int E = Integer.parseInt(st.nextToken());

        start = Integer.parseInt(br.readLine());

        shortestPath = new int[V+1];

        //모두 무한대로 초기화

        for(int i=0;i<=V;i++) shortestPath[i] = inf;

        shortestPath[start] = 0;

        nodes.add(new Node(0,null)); //0부터 시작하지 않기 위해 쓰레기 값 추가

        for(int i=0;i<V;i++) nodes.add(new Node(i+1,new ArrayList<>()));

        for(int i=0;i<E;i++){

            st = new StringTokenizer(br.readLine());

            int from = Integer.parseInt(st.nextToken());

            int to = Integer.parseInt(st.nextToken());

            int weight = Integer.parseInt(st.nextToken());

            if(from==start) {

                if((shortestPath[to] = Math.min(shortestPath[to],weight))!=weight) continue;

            }

            nodes.get(from).adj.add(new Edge(to,weight));

        }

    }

    private static void dijkstra(){

        PriorityQueue<Node> pq = new PriorityQueue<>();

        boolean[] visited = new boolean[shortestPath.length];

        for(Edge item : nodes.get(start).adj){

            pq.add(nodes.get(item.to));

        }

        while(!pq.isEmpty()){

            Node now = pq.poll();

            for(Edge item : nodes.get(now.idx).adj){

                Node next = nodes.get(item.to);

                //이전 길이보다 now node를 거쳐 가는 것이 빠를 때 - 갱신 > pq 추가

                if(shortestPath[next.idx]>shortestPath[now.idx]+item.weight) {

                    shortestPath[next.idx] = shortestPath[now.idx] + item.weight;

                    pq.add(next);

                }

            }

        }

        StringBuilder sb = new StringBuilder();

        for(int i=1;i<shortestPath.length;i++){

            int item = shortestPath[i];

            if(item==inf) sb.append("INF\n");

            else sb.append(item + "\n");

        }

        System.out.print(sb);

    }

    private static class Node implements Comparable<Node>{

        int idx;  List<Edge> adj;

        Node(int idx, List<Edge> adj){ this.idx = idx; this.adj = adj; }

        @Override

        public int compareTo(Node n){

            return (shortestPath[this.idx]<shortestPath[n.idx])? -1:1;

        }

    }

    private static class Edge{

        int weight; int to;

        Edge(int to, int weight){ this.to=to; this.weight=weight; }

    }

}


