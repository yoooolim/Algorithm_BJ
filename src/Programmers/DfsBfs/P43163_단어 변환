import java.util.*;
class Solution {
    public int solution(String begin, String target, String[] words) {
        int answer = 0;
        boolean[] visited = new boolean[words.length];
        Queue<Word> q = new LinkedList<>();
        q.offer(new Word(begin,0));
        while(!q.isEmpty()){
            Word now = q.poll();
            for(int i=0;i<words.length;i++){
                if(visited[i]||!onlyOneDiff(now.str,words[i])) continue;
                if(words[i].compareTo(target)==0) return now.chngCnt+1;
                visited[i]=true;
                q.offer(new Word(words[i],now.chngCnt+1));
            }
        }
        return answer;
    }
    private static boolean onlyOneDiff(String s1, String s2){
        int cnt = 0;
        for(int i=0;i<s1.length();i++){
            if(s1.charAt(i)!=s2.charAt(i)) cnt++;
            if(cnt>1) return false;
        }
        if(cnt==1) return true;
        return false;
    }
    private static class Word{
        String str; int chngCnt;
        Word(String str, int chngCnt){
            this.str = str; this.chngCnt=chngCnt;
        }
    }
}
